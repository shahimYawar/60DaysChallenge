Given an Array of non-negative integers. Find out the maximum perimeter of the triangle from the array.

Example 1:

Input : arr[ ] = {6, 1, 6, 5, 8, 4}
Output : 20
Explanation:
Triangle formed by  8,6 & 6. Thus perimeter 20.


// Code :

//{ Driver Code Starts
//Initial Template for Java

//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;


class Array {
    
    // Driver code
	public static void main (String[] args) throws IOException{
		// Taking input using buffered reader
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int testcases = Integer.parseInt(br.readLine());
		
		// looping through all testcases
		while(testcases-- > 0){
		    String line = br.readLine();
		    String[] element = line.trim().split("\\s+");
		    int sizeOfArray = Integer.parseInt(element[0]);
		    
		    int arr [] = new int[sizeOfArray];
		    
		    line = br.readLine();
		    String[] elements = line.trim().split("\\s+");
		    for(int i = 0;i<sizeOfArray;i++){
		        arr[i] = Integer.parseInt(elements[i]);
		    }
		    
		    
		    Complete obj = new Complete();
		    int res = obj.maxPerimeter(arr, sizeOfArray);
		    
		    System.out.println(res);
		}
	}
}

// } Driver Code Ends


//User function Template for Java


class Complete{
    
    // Function for finding maximum and value pair
    public static int maxPerimeter (int arr[], int n) {
        //Complete the function
        Arrays.sort(arr);
        int per=-1;
        int i=n-3;
        while(i>=0){
            if(arr[i]+arr[i+1]>arr[i+2]){
                per=arr[i]+arr[i+1]+arr[i+2];
                break;
            }
            i--;
        }
        return per;
    }   
}
