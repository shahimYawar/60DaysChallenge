Given an array of integers, check whether there is a subsequence with odd sum and if yes, then finding the maximum odd sum. If no subsequence contains odd sum, print -1.


Example 1:

Input:
N=4
arr[] = {4, -3, 3, -5}
Output: 7
Explanation:
The subsequence with maximum odd sum is 4 + 3 = 7


// Code :


//{ Driver Code Starts
//Initial Template for Java


import java.io.*;
import java.util.*;


// } Driver Code Ends
//User function Template for Java


class Solution
{
    long findMaxOddSubarraySum(long arr[] ,int n)
    {
        boolean isOdd=false;
        long sum=0;
        long minimumOdd=Long.MAX_VALUE;
        for(long num:arr){
            if(num>0){
                sum+=num;
            }
            if(num%2!=0){
                isOdd=true;
                if(minimumOdd>Math.abs(num)){
                    minimumOdd=Math.abs(num);
                }
            }
        }
        if(sum %2==0){
            sum-=minimumOdd;
        }
        return isOdd == false?-1:sum;
    }
}


//{ Driver Code Starts.

// Driver class
class Array {

    // Driver code
    public static void main (String[] args) throws IOException{
        // Taking input using buffered reader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int testcases = Integer.parseInt(br.readLine());
        // looping through all testcases
        while(testcases-- > 0){
            int n=Integer.parseInt(br.readLine());
            String line1 = br.readLine();
            String[] a1 = line1.trim().split("\\s+");
            long a[]=new long[n];
            for(int  i=0;i<n;i++)
            {
                a[i]=Long.parseLong(a1[i]);
            }
            Solution ob=new Solution();
            //ArrayList<Long> ans=ob.smallestDifferenceTriplet(a,b,c,n);
            long ans=ob.findMaxOddSubarraySum(a,n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends
