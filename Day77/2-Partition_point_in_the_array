Given an unsorted array of integers. Find an element such that all the elements to its left are smaller and to its right are greater. Print -1 if no such element exists. Note that there can be more than one such element. In that case print the first such number occurring in the array.

Example 1:

Input: N = 7, arr[] = {4, 3, 2, 5, 8, 6, 7} 
Output: 5
Explanation: To the left of element 5 
every element is smaller to it and to 
the right of element 5 every element 
is greater to it.  
Example 2:

Input: N = 7, arr[] = {5, 6, 2, 8, 10, 9, 8} 
Output: -1
Explanation: No such desired element is present in the array.


// Code :



//{ Driver Code Starts
// Initial Template for Java


import java.io.*;
import java.util.*;

// Position this line where user code will be pasted.

// Driver class
class Array {

    // Driver code
    public static void main(String[] args) throws IOException {
        // Taking input using buffered reader
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));

        int testcases = Integer.parseInt(br.readLine());
        // looping through all testcases
        while (testcases-- > 0) {
            int n = Integer.parseInt(br.readLine());
            //            String line = br.readLine();
            //            String[] a2 = line.trim().split("\\s+");
            //            int n =Integer.parseInt(a2[0]);
            //            int m =Integer.parseInt(a2[1]);
            // int y =Integer.parseInt(a2[2]);
            String line1 = br.readLine();
            String[] a1 = line1.trim().split("\\s+");
            long a[] = new long[n];
            for (int i = 0; i < n; i++) {
                a[i] = Long.parseLong(a1[i]);
            }
            Solution ob = new Solution();
            // ArrayList<Long> ans=ob.smallestDifferenceTriplet(a,b,c,n);
            long ans = ob.FindElement(a, n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


// User function Template for Java


class Solution {
    long FindElement(long arr[], int N) {
        // Your code goes here
        long[] arr1=new long[N];
        long[] arr2=new long[N];
        long max=Long.MIN_VALUE;
        long min=Long.MAX_VALUE;
        for(int i=0;i<N;i++){
            max=Math.max(max,arr[i]);
            arr1[i]=max;
        }
        for(int i=N-1; i>=0;i--){
            min=Math.min(min,arr[i]);
            arr2[i]=min;
        }
        for(int i=0;i<N;i++){
            if((i==0 || arr[i]>arr1[i-1]) && (i==N-1 || arr[i]<arr2[i+1])){
                return arr[i];
            }
        }
        return -1;
    }
}
