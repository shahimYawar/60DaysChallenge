Given an array A of non-negative integers. Sort the array in ascending order such that element at the Kth position in unsorted array stays unmoved and all other elements are sorted. 

Example 1:

Input:
N = 5, K = 2
arr[] = {3 12 30 79 2}
Output: 2 12 3 30 79
Explanation: The element at the 2nd position (12) remains at its own place while others are sorted.


// Code :


//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GfG
{
    public static void main (String[] args)
    {
        
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n = sc.nextInt();
            int k = sc.nextInt();
            int[] arr = new int[n];
            
            for (int i = 0; i < n; ++i)
                arr[i] = sc.nextInt ();

    		new Sol().strangeSort (arr, n, k);
    		for (int i = 0; i < n; i++)
    		    System.out.print (arr[i] + " ");
    		System.out.println ();
        }
        
    }
}

// } Driver Code Ends


//User function Template for Java

class Sol
{
    void strangeSort (int A[], int N, int K)
    {
        // your code here
        int temp=A[K-1];
        A[K-1]=Integer.MAX_VALUE;
        Arrays.sort(A);
        for(int i=N-1;i>=K;i--){
            A[i]=A[i-1];
        }
        A[K-1]=temp;
    }
}
