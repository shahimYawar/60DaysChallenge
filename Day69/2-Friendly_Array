Like people, numbers are also friends with each other. Friendliness between any two numbers a and b is defined as the absolute difference between the two. Lower is this number more friendly the numbers are. Now you are given an array of numbers and you are required to find the friendliness of this array. This can be calculated as the sum of the friendliness of each element in the array with its closest friend in the same array.

Example 1:

Input:
N=3
arr[] = { 4,1,5 }
Output: 5
Explanation: Sum of absolute differences is
            |4-5| + |1-4| + |5-4| = 5



// Code :


//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

// } Driver Code Ends
//User function Template for Java

class Solution
{
    long sumOfMinAbsDifferences(long arr[] ,int N)
    {
        if(N==2)
        return 2*Math.abs(arr[0]-arr[1]);
        Arrays.sort(arr);
        long ans=arr[N-1]-arr[N-2];
        ans+=(arr[1]-arr[0]);
        for(int i=1;i<N-1;i++){
            ans=ans+Math.min(arr[i]-arr[i-1],arr[i+1]-arr[i]);
        }
        return ans;
    }
}

//{ Driver Code Starts.

// Driver class
class Array {

    // Driver code
    public static void main (String[] args) throws IOException{
        // Taking input using buffered reader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int testcases = Integer.parseInt(br.readLine());
        // looping through all testcases
        while(testcases-- > 0){
            int n=Integer.parseInt(br.readLine());
            String line1 = br.readLine();
            String[] a1 = line1.trim().split("\\s+");
            long a[]=new long[n];
            for(int  i=0;i<n;i++)
            {
                a[i]=Long.parseLong(a1[i]);
            }
            Solution ob=new Solution();
            long ans=ob.sumOfMinAbsDifferences(a,n);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends
