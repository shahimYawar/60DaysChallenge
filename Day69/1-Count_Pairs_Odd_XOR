Given an array arr[] of N integers, the task is to find the number of pairs in the array whose XOR is odd.

Example 1:

Input: N = 3, arr[] = {1, 2, 3}
Output: 2
Explanation: All pairs of array
             1 ^ 2 = 3
             1 ^ 3 = 2
             2 ^ 3 = 1
             
             
 // Code :
 
 
 //{ Driver Code Starts
//Initial Template for Java


import java.io.*;
import java.util.*;


// } Driver Code Ends
//User function Template for Java

class Solution
{
    long countXorPair(long arr[], int n)
    {
        int even=0;
        int odd=0;
        for(int i=0;i<n;i++){
            if(arr[i]%2==0)
                even++;
            else
                odd++;
        }
        return (long)(even*odd);
    }
}

//{ Driver Code Starts.

// Driver class
class Array {

    // Driver code
    public static void main(String[] args) throws IOException {
        // Taking input using buffered reader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int testcases = Integer.parseInt(br.readLine());
        // looping through all testcases
        while (testcases-- > 0) {
            int n = Integer.parseInt(br.readLine());
            String line1 = br.readLine();
            String[] a1 = line1.trim().split("\\s+");
            long a[] = new long[n];
            for (int i = 0; i < n; i++) {
                a[i] = Long.parseLong(a1[i]);
            }
            Solution ob = new Solution();
            //ArrayList<Long> ans=ob.smallestDifferenceTriplet(a,b,c,n);
            long ans = ob.countXorPair(a,n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends
