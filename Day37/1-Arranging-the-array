You are given an array of size N. Rearrange the given array in-place such that all the negative numbers occur before positive numbers.(Maintain the order of all -ve and +ve numbers as given in the original array).
 

Example 1:

Input:
N = 4
Arr[] = {-3, 3, -2, 2}
Output:
-3 -2 3 2
Explanation:
In the given array, negative numbers are -3, -2 and positive numbers are 3, 2. 



//Code :

//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
	        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            long n = Long.parseLong(br.readLine().trim());
            long a[] = new long[(int)(n)];
            // long getAnswer[] = new long[(int)(n)];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Long.parseLong(inputLine[i]);
            }
            
            Compute obj = new Compute();
            obj.Rearrange(a, n);
            
            StringBuilder output = new StringBuilder();
            for(int i=0;i<n;i++)
                output.append(a[i]+" ");
            System.out.println(output);
            
        }
	}
}

// } Driver Code Ends

//User function Template for Java

class Compute {
    
    public void Rearrange(long a[], long n)
    {
        // Your code goes here
        ArrayList<Long> pos=new ArrayList<>();
        ArrayList<Long> neg=new ArrayList<>();
        
        for (long x :a){
            if(x<0){
                neg.add(x);
            }
            else{
                pos.add(x);
            }
        }
        long count=0;
        for(long y : neg){
            a[(int)count++]=y;
        }
        for(long z: pos){
            a[(int)count++]=z;
        }
    }
}
