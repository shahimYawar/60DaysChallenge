Given an array arr of size N, the goal is to find out the smallest number that is repeated exactly ‘K’ times.

Example 1:

Input:
N=5, K=2
arr[] = { 2 2 1 3 1 }
Output: 1
Explanation: Here in array, 2 is repeated 2 times, 1 is repeated 2 times, 3 is repeated 1 time.
Hence 2 and 1 both are repeated 'k' times i.e 2 and min(2, 1) is 1 .

// Code :

//{ Driver Code Starts
//Initial Template for Java


import java.io.*;
import java.util.*;


// } Driver Code Ends


class Solution
{
    int findDuplicate(int arr[], int N,int K)
    {
    HashMap<Integer,Integer> map = new HashMap<>();
    int key=Integer.MAX_VALUE;
    for(int i=0;i<N;i++){
        int el=arr[i];
        map.put(el,map.getOrDefault(el,0)+1);
    }
    for(int x:map.keySet()){
        if(map.get(x)==K){
            if(x<key){
                key=x;
            }
        }
    }
    if(key==Integer.MAX_VALUE){
        return -1;
    }
    return key;
    }
}


//{ Driver Code Starts.

// Driver class
class Array {

    // Driver code
    public static void main(String[] args) throws IOException {
        // Taking input using buffered reader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int testcases = Integer.parseInt(br.readLine());
        // looping through all testcases
        while (testcases-- > 0) {
//            int n = Integer.parseInt(br.readLine());
            String line = br.readLine();
            String[] q = line.trim().split("\\s+");
            int n =Integer.parseInt(q[0]);
            int k =Integer.parseInt(q[1]);
//            //int y =Integer.parseInt(q[2]);
            String line1 = br.readLine();
            String[] a1 = line1.trim().split("\\s+");
            int a[] = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(a1[i]);
            }


            Solution ob = new Solution();
            int ans=ob.findDuplicate(a,n,k);
            System.out.println(ans);
        }
    }
}




// } Driver Code Ends
